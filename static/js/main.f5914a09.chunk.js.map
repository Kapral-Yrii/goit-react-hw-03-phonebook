{"version":3,"sources":["components/ContactForm/ContactForm.module.css","App.module.css","components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Notification/Notification.module.css","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","setState","target","value","handleSubmit","preventDefault","newContact","id","uuid","checkSameContact","props","contactList","find","toLowerCase","alert","addNewContact","resetForm","onSubmit","this","className","s","form","label","input","onChange","type","pattern","title","required","button","Component","ContactListItem","contacts","deleteContact","map","item","onClick","ContactList","list","Filter","filterContactByName","Notification","App","filter","prev","dataset","localContacts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","filterContacts","includes","app","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5914a09.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3wGs8\",\"label\":\"ContactForm_label__3YC8y ContactForm_form__3wGs8\",\"input\":\"ContactForm_input__2IGuJ\",\"button\":\"ContactForm_button__36bbc ContactForm_input__2IGuJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3KJoD\",\"title\":\"App_title__3TBdr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3XrGX\",\"button\":\"ContactListItem_button__3YgBx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__zjnQI\",\"input\":\"Filter_input__2G5wK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__116BT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__2YO_6\"};","import PropTypes from 'prop-types'\r\nimport { Component } from 'react'\r\nimport { v4 as uuid } from 'uuid'\r\nimport s from './ContactForm.module.css'\r\n\r\nexport class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: ''\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const contactId = uuid()\r\n    const newContact = {\r\n      id: contactId,\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    }\r\n    const checkSameContact = this.props.contactList.find(e => e.name.toLowerCase() === newContact.name.toLowerCase())\r\n    if (!checkSameContact) {\r\n      this.props.addNewContact(newContact)\r\n    } else {\r\n      alert(`${checkSameContact.name} is already in contacts`)\r\n    }\r\n    \r\n    this.resetForm()\r\n  }\r\n\r\n  resetForm = () => {\r\n    this.setState({name: '', number: ''})\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <form onSubmit={this.handleSubmit} className={s.form}>\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            onChange={this.handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.button}>Add contact</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  contactList: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n  addNewContact: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport { v4 as uuid } from 'uuid'\r\nimport s from './ContactListItem.module.css'\r\n\r\nexport function ContactListItem({ contacts, deleteContact }) {\r\n    return (\r\n        <>\r\n            {contacts.map(e => {\r\n                return (\r\n                    <li className={s.item} key={uuid()}>{e.name}: {e.number}<button className={s.button} onClick={deleteContact} data-id={e.id}>X</button></li>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n    deleteContact: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport { ContactListItem } from '../ContactListItem/ContactListItem'\r\nimport s from './ContactList.module.css'\r\n\r\nexport function ContactList({contacts, deleteContact}) {\r\n    return (\r\n        <ul className={s.list}>\r\n           <ContactListItem contacts={contacts} deleteContact={deleteContact}/> \r\n        </ul>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n    deleteContact: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport s from './Filter.module.css'\r\n\r\nexport function Filter({filterContactByName}) {\r\n    return (\r\n        <>\r\n            <label className={s.label}>\r\n                Find contact by name\r\n                <input className={s.input} type=\"text\" onChange={filterContactByName}/>\r\n            </label>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    filterContactByName: PropTypes.func\r\n}\r\n","import s from './Notification.module.css'\r\nexport function Notification() {\r\n    return (\r\n        <p className={s.title}>Contact list is empty</p>\r\n    )\r\n}","import s from './App.module.css';\r\nimport { Component } from 'react'\r\nimport { ContactForm } from './components/ContactForm/ContactForm'\r\nimport { ContactList } from './components/ContactList/ContactList'\r\nimport { Filter } from './components/Filter/Filter'\r\nimport{ Notification } from './components/Notification/Notification'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: ''\r\n  }\r\n  componentDidMount() {\r\n    const localContacts = localStorage.getItem('contacts')\r\n    this.setState({\r\n      contacts: JSON.parse(localContacts)\r\n    })\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\r\n    }\r\n  }\r\n  \r\n  addNewContact = (newContact) => {\r\n    this.setState((prev) => {\r\n      return ({\r\n        contacts: [...prev.contacts, newContact]\r\n      })\r\n    })\r\n  }\r\n  deleteContact = (e) => {\r\n    const id = e.target.dataset.id\r\n    this.setState((prev) => {\r\n      return ({\r\n        contacts: prev.contacts.filter(e => e.id !== id)\r\n      })\r\n    })\r\n  }\r\n  filterContactByName = (e) => {\r\n    this.setState({ filter: e.target.value.toLowerCase()})\r\n  }\r\n\r\n  render() {\r\n    const filterContacts = this.state.contacts.filter(e => e.name.toLowerCase().includes(this.state.filter))\r\n\r\n    return (\r\n      <div className={s.app}>\r\n        <h1 className={s.title}>Phonebook</h1>\r\n        <ContactForm addNewContact={this.addNewContact} contactList={this.state.contacts}/>\r\n        <h2 className={s.title}>Contacts</h2>\r\n        {this.state.contacts.length > 0 ? (\r\n          <>\r\n            <Filter filterContactByName={this.filterContactByName}/>\r\n            <ContactList contacts={filterContacts} deleteContact={this.deleteContact} />\r\n          </>\r\n        ) : (<Notification/>)}\r\n        \r\n      </div>)\r\n  }   \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}